{
	"info": {
		"_postman_id": "db6993ae-9c17-4954-95d6-3a1c7e64291c",
		"name": "Group_25",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HomeWork_2",
			"item": [
				{
					"name": "First",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что в body приходит привильный string\r",
									"var text = pm.response.text();\r",
									"\r",
									"pm.test(\"Body is string!\", function () {\r",
									"    pm.expect(text).to.be.a(\"string\");\r",
									"});\r",
									"console.log(\"Text = \" + text, typeof(text))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Спарсить response body в json\r",
									"var respons = pm.response.json();\r",
									"//Спарсить request.\r",
									"var request = request.data;\r",
									"\r",
									"//Спарсить request. с элемнтом salary\r",
									"var salary = request.salary;\r",
									"\r",
									"//Проверка, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"My name is Yaroslav\", function () {\r",
									"pm.expect(respons.name).to.equal(\"Yaroslav\");\r",
									"});\r",
									"\r",
									"// Проверка, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"My age is 25\", function() {\r",
									"pm.expect(respons.age).to.equal(\"25\");\r",
									"});\r",
									"\r",
									"//Проверка, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"My salary is 3000\", function() {\r",
									"pm.expect(respons.salary).to.equal(3000);\r",
									"});\r",
									"\r",
									"//Проверка, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"My name equal to request\", function(){\r",
									"pm.expect(respons.name).to.equal(request.name)\r",
									"})\r",
									"\r",
									"//Проверка, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"My age equal to request\", function(){\r",
									"pm.expect(respons.age).to.equal(request.age)\r",
									"});\r",
									"\r",
									"//Проверка, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"My salary equal to request\", function(){\r",
									"pm.expect(respons.salary).to.equal(Number(request.salary))\r",
									"})\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(\"family =  \" , respons.family);\r",
									"\r",
									"//Проверка что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"My salary after 1,5 years increase at  *4\", function(){\r",
									"    pm.expect(respons.family.u_salary_1_5_year).to.equal(salary*4);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Yaroslav",
									"type": "text"
								},
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Спарсить response body в json.\r",
									"var respons = pm.response.json();\r",
									"//Спарсить request.\r",
									"var request = pm.request.url.query.toObject();\r",
									"var dog = pm.response.json().family.pets.dog;\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"//Проверка, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"My name is Yaroslav\", function() {\r",
									"    pm.expect(respons.name).to.equal(request.name);\r",
									"});\r",
									"//Проверка, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"My age is 25\", function(){\r",
									"    pm.expect(respons.age).to.equal(respons.age);\r",
									"})\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"My salary is 3000\", function() {\r",
									"    pm.expect(respons.salary).to.equal(+request.salary);\r",
									"});\r",
									"// Вывести в консоль параметр family из response.\r",
									"console.log(\"Family = \" , respons.family);\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры name\r",
									"pm.test(\"Dog has a name\", function() {\r",
									"    pm.expect(dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog has an age\", function() {\r",
									"    pm.expect(dog).to.have.property(\"age\");\r",
									"});\r",
									"\r",
									"// Проверить, что параметр name имеет значение Luky\r",
									"pm.test(\"Dog is a Luky\", function(){\r",
									"pm.expect(dog.name).to.include(\"Luky\");\r",
									"});\r",
									"\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Dog is 4 y.o\", function(){\r",
									"    pm.expect(dog.age).to.have.equal(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Yaroslav&age=25&salary=3000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Yaroslav"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Спарсить response body в json.\r",
									"let respons = pm.response.json();\r",
									"//Спарсить request.\r",
									"let query = pm.request.toJSON().url.query;\r",
									"\r",
									"\r",
									"let name = respons.name;\r",
									"let age = respons.age;\r",
									"let salary = respons.salary;\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Response name is equal to request\", function() {\r",
									"    pm.expect(respons.name).to.equal(query[0].value)\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Response age is equal to request\", function(){\r",
									"    pm.expect(respons.age).to.equal(+query[1].value);\r",
									"});\r",
									"\r",
									"\r",
									"console.log(\"Request Salary = \" , query[2]);\r",
									"console.log(\"Response Salary = \" , respons.salary);\r",
									"console.log(\"Response salary [0] = \" , respons.salary[0]);\r",
									"console.log(\"Response salary [1] = \" , respons.salary[1]);\r",
									"console.log(\"Response salary [2] = \" , respons.salary[2]);\r",
									"\r",
									"//Проверка, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Response salary [0] is equal to request\", function() {\r",
									"    pm.expect(respons.salary[0]).to.equal(+query[2].value);\r",
									"});\r",
									"\r",
									"//Проверка, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Response salary [1] is equal to request\", function() {\r",
									"    pm.expect(+respons.salary[1]).to.equal(+query[2].value*2);\r",
									"});\r",
									"\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Response salary [2] is equal to request\", function() {\r",
									"    pm.expect(+respons.salary[2]).to.equal(+query[2].value*3);\r",
									"});\r",
									"\r",
									"//объявили окружение\r",
									"pm.environment.set(\"name\", name);\r",
									"pm.environment.set(\"age\", age);\r",
									"pm.environment.set(\"salary\", salary[0]);\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"for (let a = 0; a < salary.length; a++) {\r",
									"    console.log(\"Salary_\" + a + \": \" +salary[a])\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Yaroslav&age=25&salary=3000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Yaroslav"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Спарсить response body в json\r",
									"let respons = pm.response.json();\r",
									"// Спарсить request\r",
									"let req = request.data;\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//  Проверка, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Json has start_qa_salary\", function(){\r",
									"    pm.expect(respons).to.have.property(\"start_qa_salary\")\r",
									"});\r",
									"\r",
									"// Проверка, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Json has qa_salary_after_6_months\", function() {\r",
									"    pm.expect(respons).to.have.property(\"qa_salary_after_6_months\")\r",
									"});\r",
									"\r",
									"// Проверка, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Json has qa_salary_after_12_months\", function() {\r",
									"    pm.expect(respons).to.have.property(\"qa_salary_after_12_months\")\r",
									"});\r",
									"\r",
									"// Проверка, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Json has qa_salary_after_1.5_year\", function() {\r",
									"    pm.expect(respons).to.have.property(\"qa_salary_after_1.5_year\")\r",
									"});\r",
									"\r",
									"// Проверка, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Json has qa_salary_after_3.5_years\", function() {\r",
									"    pm.expect(respons).to.have.property(\"qa_salary_after_3.5_years\")\r",
									"});\r",
									"\r",
									"// Проверка, что json response имеет параметр person\r",
									"pm.test(\"Json has person\", function() {\r",
									"    pm.expect(respons).to.have.property(\"person\")\r",
									"});\r",
									"\r",
									"// Проверка, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Response start salary eql to request salary\", function() {\r",
									"    pm.expect(respons.start_qa_salary).to.have.equal(+req.salary)\r",
									"});\r",
									"\r",
									"// Проверка, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Response qa_salary_after_6_months eql to request salary*2\", function() {\r",
									"    pm.expect(respons.qa_salary_after_6_months).to.have.equal(+req.salary*2)\r",
									"});\r",
									"\r",
									"// Проверка, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"Response qa_salary_after_12_months eql to request salary*2.7\", function() {\r",
									"    pm.expect(respons.qa_salary_after_12_months).to.have.equal(+req.salary*2.7)\r",
									"});\r",
									"\r",
									"// Проверка, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"Response qa_salary_after_1.5_year eql to request salary*3.3\", function() {\r",
									"    pm.expect(respons[\"qa_salary_after_1.5_year\"]).to.have.equal(+req.salary*3.3)\r",
									"});\r",
									"\r",
									"// Проверка, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"Response qa_salary_after_3.5_years eql to request salary*3.5\", function() {\r",
									"    pm.expect(respons[\"qa_salary_after_3.5_years\"]).to.have.equal(+req.salary*3.8)\r",
									"});\r",
									"\r",
									"// Проверка, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Response u_name salary eql to request salary\", function() {\r",
									"    pm.expect(respons.person.u_name[1]).to.have.equal(+req.salary)\r",
									"});\r",
									"\r",
									"// Проверка, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Response u_age salary eql to request salary\", function() {\r",
									"    pm.expect(respons.person.u_age).to.have.equal(+req.age)\r",
									"});\r",
									"\r",
									"// Проверка, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Response u_salary_5_years eql to request salary*4.2\", function() {\r",
									"    pm.expect(respons.person.u_salary_5_years).to.have.equal(+req.salary*4.2)\r",
									"});\r",
									"\r",
									"for (let a in respons.person){\r",
									"    if(a===\"u_name\") for( let b in respons.person[a])\r",
									"    console.log(a + b + \" : \" + respons.person[a][b])\r",
									"    else (console.log(a + \" : \" + respons.person[a]))\r",
									"}\r",
									"\r",
									"// for(const [key, value] of Object.entries(respons.person)) {\r",
									"//     console.log(key,value)\r",
									"// };\r",
									"// respons.person.u_name.forEach(function(element){\r",
									"//     console.log(element)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "1",
			"value": "http://162.55.220.72:5005"
		}
	]
}
